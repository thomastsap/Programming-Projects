---------- Canonical Mode ----------
Keyboard input is only sent to the program when the user presses Enter

---------- Keypresses translate to bytes ----------

All escape sequences start with a 27 byte. 
Pressing escape sends a single 27 byte as input.

Enter is byte 10, also known as an escape sequence.

Ctrl + S -> Pause transmission
Ctrl + Q -> Resume transmission
Ctrl + M -> Carriage return. Translated to enter
Ctrl + V -> Waits user to type a character and sends that character literally

---------- Flags ----------
-> ECHO: Stop printing the characters that we type
-> ICANON: turns off canonical mode so we read byte by byte instead of line per line
-> ISIG: Turning off Ctrl-C and Ctrl-Z
-> OPOST: Enter is translated into newline not carriage return - newline

---------- Ouput Processing ----------
The terminal does a translation on the output side. It translates "\r\n" to "\n"

---------- read ----------
We want read to return every 100 milliseconds if it hasn't any character to read.
Let's say because we want to animate something on the screen while we wait for user input. 


---------- errno ----------
A global variable that indicates what the error was. Perror() looks at errno, prints a descriptive error message for it and also prints the string given to it(before it prints the error message). 

---------- Ctrl + Key ----------
M -> 109d
Ctrl + M -> 13d

So Ctrl strips bits 5 and 6 from whatever key i press in combination with Ctrl

---------- Esc -----------

Esc = /x1b = 27

\x1b[ -> this is a Control Sequence Introducer that consists of hexadecimal ASCII ESC character code and a [.

For example:

echo -en "\x1b[31;4mHello\n\x1b[0m"; prints Hello in red underlined
echo -en "\x1b[H";places the cursor at [line, column] = [1, 1]
31;4 -> ;31;4, so color red, underline

If color code is prefixed by 38;5 it is interpreted as one of 256 colors.